// Generated by pscpp compiler

#ifndef Data_Tuple_H
#define Data_Tuple_H

#include "purescript.h"

namespace Data_Tuple {

using namespace purescript;

auto Tuple() -> const boxed&;
auto uncurry() -> const boxed&;
auto swap() -> const boxed&;
auto snd() -> const boxed&;
auto showTuple() -> const boxed&;
auto semiringTuple() -> const boxed&;
auto semigroupoidTuple() -> boxed;
auto semigroupTuple() -> const boxed&;
auto ringTuple() -> const boxed&;
auto monoidTuple() -> const boxed&;
auto lookup() -> const boxed&;
auto heytingAlgebraTuple() -> const boxed&;
auto functorTuple() -> boxed;
auto functorWithIndexTuple() -> boxed;
auto invariantTuple() -> boxed;
auto fst() -> const boxed&;
auto lazyTuple() -> const boxed&;
auto foldableTuple() -> boxed;
auto foldableWithIndexTuple() -> boxed;
auto traversableTuple() -> boxed;
auto traversableWithIndexTuple() -> boxed;
auto foldable1Tuple() -> boxed;
auto traversable1Tuple() -> boxed;
auto extendTuple() -> boxed;
auto eqTuple() -> const boxed&;
auto ordTuple() -> const boxed&;
auto eq1Tuple() -> const boxed&;
auto ord1Tuple() -> const boxed&;
auto distributiveTuple() -> const boxed&;
auto curry() -> const boxed&;
auto comonadTuple() -> boxed;
auto commutativeRingTuple() -> const boxed&;
auto boundedTuple() -> const boxed&;
auto booleanAlgebraTuple() -> const boxed&;
auto bifunctorTuple() -> boxed;
auto bifoldableTuple() -> boxed;
auto bitraversableTuple() -> boxed;
auto biapplyTuple() -> boxed;
auto biapplicativeTuple() -> boxed;
auto applyTuple() -> const boxed&;
auto bindTuple() -> const boxed&;
auto applicativeTuple() -> const boxed&;
auto monadTuple() -> const boxed&;

} // end namespace Data_Tuple

#endif // Data_Tuple_H

