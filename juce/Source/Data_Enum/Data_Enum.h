// Generated by pscpp compiler

#ifndef Data_Enum_H
#define Data_Enum_H

#include "purescript.h"

namespace Data_Enum {

using namespace purescript;

auto Cardinality() -> const boxed&;
auto Enum() -> const boxed&;
auto BoundedEnum() -> const boxed&;
auto toEnum() -> const boxed&;
auto succ() -> const boxed&;
auto upFromIncluding() -> const boxed&;
auto showCardinality() -> boxed;
auto pred() -> const boxed&;
auto ordCardinality() -> boxed;
auto newtypeCardinality() -> boxed;
auto fromEnum() -> const boxed&;
auto toEnumWithDefaults() -> const boxed&;
auto eqCardinality() -> boxed;
auto enumUnit() -> boxed;
auto enumTuple() -> const boxed&;
auto enumOrdering() -> boxed;
auto enumMaybe() -> const boxed&;
auto enumInt() -> boxed;
auto enumFromTo() -> const boxed&;
auto enumFromThenTo() -> const boxed&;
auto enumEither() -> const boxed&;
auto enumBoolean() -> boxed;
auto downFromIncluding() -> const boxed&;
auto diag() -> const boxed&;
auto downFrom() -> const boxed&;
auto upFrom() -> const boxed&;
auto defaultToEnum() -> const boxed&;
auto defaultSucc() -> const boxed&;
auto defaultPred() -> const boxed&;
auto defaultFromEnum() -> const boxed&;
auto defaultCardinality() -> const boxed&;
auto charToEnum() -> const boxed&;
auto enumChar() -> boxed;
auto cardinality() -> const boxed&;
auto boundedEnumUnit() -> boxed;
auto boundedEnumOrdering() -> boxed;
auto boundedEnumChar() -> boxed;
auto boundedEnumBoolean() -> boxed;
auto toCharCode() -> const boxed&;
auto fromCharCode() -> const boxed&;

} // end namespace Data_Enum

#endif // Data_Enum_H

