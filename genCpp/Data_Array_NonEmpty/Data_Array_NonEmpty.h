// Generated by pscpp compiler

#ifndef Data_Array_NonEmpty_H
#define Data_Array_NonEmpty_H

#include "purescript.h"

namespace Data_Array_NonEmpty {

using namespace purescript;

auto unsafeFromArrayF() -> boxed;
auto unsafeFromArray() -> boxed;
auto toArray() -> boxed;
auto unionBy_Prime_() -> const boxed&;
auto union_Prime_() -> const boxed&;
auto unionBy() -> const boxed&;
auto _union_() -> const boxed&;
auto unzip() -> boxed;
auto updateAt() -> const boxed&;
auto zip() -> const boxed&;
auto zipWith() -> const boxed&;
auto zipWithA() -> const boxed&;
auto some() -> const boxed&;
auto snoc_Prime_() -> const boxed&;
auto snoc() -> const boxed&;
auto singleton() -> boxed;
auto replicate() -> const boxed&;
auto range() -> const boxed&;
auto modifyAt() -> const boxed&;
auto intersectBy_Prime_() -> const boxed&;
auto intersectBy() -> const boxed&;
auto intersect_Prime_() -> const boxed&;
auto intersect() -> const boxed&;
auto insertAt() -> const boxed&;
auto fromFoldable1() -> const boxed&;
auto fromArray() -> const boxed&;
auto fromFoldable() -> const boxed&;
auto difference_Prime_() -> const boxed&;
auto cons_Prime_() -> const boxed&;
auto fromNonEmpty() -> const boxed&;
auto concatMap() -> boxed;
auto concat() -> boxed;
auto appendArray() -> const boxed&;
auto alterAt() -> const boxed&;
auto adaptMaybe() -> const boxed&;
auto head() -> boxed;
auto init() -> boxed;
auto last() -> boxed;
auto tail() -> boxed;
auto uncons() -> boxed;
auto toNonEmpty() -> boxed;
auto unsnoc() -> boxed;
auto adaptAny() -> const boxed&;
auto catMaybes() -> boxed;
auto _delete_() -> const boxed&;
auto deleteAt() -> const boxed&;
auto deleteBy() -> const boxed&;
auto difference() -> const boxed&;
auto drop() -> const boxed&;
auto dropEnd() -> const boxed&;
auto dropWhile() -> const boxed&;
auto elemIndex() -> const boxed&;
auto elemLastIndex() -> const boxed&;
auto filter() -> const boxed&;
auto filterA() -> const boxed&;
auto findIndex() -> const boxed&;
auto findLastIndex() -> const boxed&;
auto foldM() -> const boxed&;
auto foldRecM() -> const boxed&;
auto index() -> boxed;
auto length() -> boxed;
auto mapMaybe() -> const boxed&;
auto partition() -> const boxed&;
auto slice() -> const boxed&;
auto span() -> const boxed&;
auto take() -> const boxed&;
auto takeEnd() -> const boxed&;
auto takeWhile() -> const boxed&;
auto toUnfoldable() -> const boxed&;
auto unsafeAdapt() -> const boxed&;
auto cons() -> const boxed&;
auto insert() -> const boxed&;
auto insertBy() -> const boxed&;
auto modifyAtIndices() -> const boxed&;
auto nub() -> const boxed&;
auto nubBy() -> const boxed&;
auto nubByEq() -> const boxed&;
auto nubEq() -> const boxed&;
auto reverse() -> boxed;
auto sort() -> const boxed&;
auto sortBy() -> const boxed&;
auto sortWith() -> const boxed&;
auto updateAtIndices() -> const boxed&;
auto unsafeIndex() -> const boxed&;
auto toUnfoldable1() -> const boxed&;

} // end namespace Data_Array_NonEmpty

#endif // Data_Array_NonEmpty_H

