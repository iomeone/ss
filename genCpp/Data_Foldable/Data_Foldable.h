// Generated by pscpp compiler

#ifndef Data_Foldable_H
#define Data_Foldable_H

#include "purescript.h"

namespace Data_Foldable {

using namespace purescript;

auto Foldable() -> const boxed&;
auto foldr() -> const boxed&;
auto indexr() -> const boxed&;
auto null() -> const boxed&;
auto oneOf() -> const boxed&;
auto oneOfMap() -> const boxed&;
auto traverse_() -> const boxed&;
auto for_() -> const boxed&;
auto sequence_() -> const boxed&;
auto foldl() -> const boxed&;
auto indexl() -> const boxed&;
auto intercalate() -> const boxed&;
auto length() -> const boxed&;
auto maximumBy() -> const boxed&;
auto maximum() -> const boxed&;
auto minimumBy() -> const boxed&;
auto minimum() -> const boxed&;
auto product() -> const boxed&;
auto sum() -> const boxed&;
auto foldableMultiplicative() -> boxed;
auto foldableMaybe() -> boxed;
auto foldableDual() -> boxed;
auto foldableDisj() -> boxed;
auto foldableConj() -> boxed;
auto foldableAdditive() -> boxed;
auto foldMapDefaultR() -> const boxed&;
auto foldableArray() -> boxed;
auto foldMapDefaultL() -> const boxed&;
auto foldMap() -> const boxed&;
auto foldableFirst() -> boxed;
auto foldableLast() -> boxed;
auto foldlDefault() -> const boxed&;
auto foldrDefault() -> const boxed&;
auto surroundMap() -> const boxed&;
auto surround() -> const boxed&;
auto foldM() -> const boxed&;
auto fold() -> const boxed&;
auto findMap() -> const boxed&;
auto find() -> const boxed&;
auto any() -> const boxed&;
auto elem() -> const boxed&;
auto notElem() -> const boxed&;
auto _or_() -> const boxed&;
auto all() -> const boxed&;
auto _and_() -> const boxed&;
auto foldrArray() -> const boxed&;
auto foldlArray() -> const boxed&;

} // end namespace Data_Foldable

#endif // Data_Foldable_H

